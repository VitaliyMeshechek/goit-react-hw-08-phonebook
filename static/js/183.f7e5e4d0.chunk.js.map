{"version":3,"file":"static/js/183.f7e5e4d0.chunk.js","mappings":"2PAEaA,EAAOC,EAAAA,GAAAA,GAAH,kJASJC,EAAOD,EAAAA,GAAAA,GAAH,4PAUJE,EAASF,EAAAA,GAAAA,OAAH,6UAgBNG,EAAOH,EAAAA,GAAAA,EAAH,iF,oBC/BJI,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAChCC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,+BACA,UAACR,EAAD,YACE,UAACE,EAAD,WACGG,EADH,MACYC,MAEZ,SAACL,EAAD,CAAQQ,QATK,WACfF,GAASG,EAAAA,EAAAA,IAAcN,GACxB,EAO8BO,KAAK,SAASN,KAAK,SAA9C,sBAJSD,IAUd,E,UCrBYQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EAEtBC,EAAkB,SAAAF,GAAK,OAAIA,EAAMC,SAASE,SAAnB,EACvBC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,KAAnB,EAGnBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACR,EANyB,SAAAC,GAAK,OAAIA,EAAMQ,OAAOA,MAAjB,IAO/B,SAACP,EAAUO,GACTC,QAAQC,IAAI,yBACZ,IAAMC,EAAOH,EAAOI,cACpB,OAAOX,EAASO,QAAO,qBAAGhB,KACnBoB,cAAcC,SAASF,EADP,GAGxB,ICTUG,EAAc,WAE3B,IAAMb,GAAWc,EAAAA,EAAAA,IAAYT,GAG3B,OACE,SAACrB,EAAD,UACGgB,EAASe,KAAI,gBAAGzB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACb,SAACH,EAAD,CAAsBC,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EADL,KAKnB,E,qECjBY0B,EAAO/B,EAAAA,GAAAA,KAAH,yUA6CJE,GAzBQF,EAAAA,GAAAA,MAAH,gKAUGA,EAAAA,GAAAA,MAAH,oQAeIA,EAAAA,GAAAA,OAAH,kjBCnCNgC,EAAc,WAAO,IAAD,QACzBjB,GAAWc,EAAAA,EAAAA,IAAYhB,GACvBL,GAAWC,EAAAA,EAAAA,MAEXwB,EAASC,EAAAA,KAAaC,MAAM,CAChC7B,KAAM4B,EAAAA,KAAaE,SAAS,oBAC5B7B,OAAQ2B,EAAAA,KAAaG,IAAI,EAAG,sCAAsCD,SAAS,wBAC1EA,WAIH,GAMYE,EAAAA,EAAAA,IAAQ,CAChBC,cAAe,CACfjC,KAAM,GACNC,OAAQ,IAEXiC,UAAUC,EAAAA,EAAAA,GAAYR,GAEvBS,KAAM,aAZJC,EADF,EACEA,SACAC,EAFF,EAEEA,aAEEC,EAJJ,EAGEC,UACED,OAEFE,EANF,EAMEA,MA8BA,OACE,UAAChB,EAAD,CAAMiB,SAAUJ,GArBH,SAACK,GAAW,IAAD,YACJlC,GADI,IAC1B,2BAAgC,CAAC,IAAtBmC,EAAqB,QAC9B,GAAIA,EAAQ5C,KAAKoB,gBAAkBuB,EAAM3C,KAAKoB,cAE7C,YADCyB,EAAAA,GAAAA,MAAA,sBAA2BF,EAAM3C,KAAjC,4DAIF,GAAI4C,EAAQ3C,SAAW0C,EAAM1C,OAE5B,YADC4C,EAAAA,GAAAA,MAAA,sBAA2BF,EAAM1C,OAAjC,6DAGL,CAX2B,+BAa1BC,GAAS4C,EAAAA,EAAAA,IAAWH,IACpB1B,QAAQC,IAAIyB,GAEVF,GACH,IAIG,WACA,SAACM,EAAA,GAAD,gBACEC,MAAM,OACNC,QAAQ,WACRC,GAAI,CAAEC,MAAO,QACbtC,QAAQ,UAAC0B,EAAOvC,YAAR,QAAC,EAAaoD,SACtBrD,GAAG,iBACHsD,WAAU,UAAEd,EAAOvC,YAAT,aAAE,EAAaoD,SACrBf,EAAS,SAPf,IAQEiB,YAAY,oBACZxB,UAAQ,MAGV,SAACiB,EAAA,GAAD,gBACIhD,GAAG,iBACHiD,MAAM,SACNC,QAAQ,WACRC,GAAI,CAAEC,MAAO,OAAQI,OAAQ,QAC7B1C,QAAQ,UAAC0B,EAAOtC,cAAR,QAAC,EAAemD,SACxBC,WAAU,UAAEd,EAAOtC,cAAT,aAAE,EAAemD,SACvBf,EAAS,WAPjB,IAQIiB,YAAY,YAGZxB,UAAQ,MAIZ,SAAC,EAAD,CAAQxB,KAAK,SAAb,2BAGL,E,UCzFYkD,EAAY9D,EAAAA,GAAAA,IAAH,qFAMT+D,EAAQ/D,EAAAA,GAAAA,MAAH,4JAULgE,EAAQhE,EAAAA,GAAAA,MAAH,uRCdLiE,EAAS,WACpB,IAAMzD,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAACqD,EAAD,WACE,UAAC,EAAD,oCAEA,SAAC,EAAD,CACElD,KAAK,OACLsD,SAZe,SAAAjB,GACrB,IAAMkB,EAAclB,EAAMmB,OAAOC,MAC/B7D,GAAS8D,EAAAA,EAAAA,GAAaH,GACtB,EAUII,QAAQ,yHACRC,MAAM,+IAKb,ECvBYV,EAAY9D,EAAAA,GAAAA,IAAH,gQAWTyE,EAAQzE,EAAAA,GAAAA,GAAH,+KASL0E,EAAY1E,EAAAA,GAAAA,EAAH,oNCXP,SAAS2E,IACtB,IAAM5D,GAAWc,EAAAA,EAAAA,IAAYhB,GACvBL,GAAWC,EAAAA,EAAAA,MACXQ,GAAYY,EAAAA,EAAAA,IAAYb,GACxBG,GAAQU,EAAAA,EAAAA,IAAYX,GACpB0D,EAAiB7D,EAAS8D,OAMhC,OAJAC,EAAAA,EAAAA,YAAU,WACRtE,GAASuE,EAAAA,EAAAA,MACV,GAAE,CAACvE,KAGF,UAAC,EAAD,YACA,SAACiE,EAAD,CAAOD,MAAM,YAAb,wBACA,SAACxC,EAAD,KACA,SAACyC,EAAD,CAAOD,MAAM,UAAb,sBACA,SAACP,EAAD,IACChD,IAAcE,IAAS,kDACvByD,EAAiB,GACjB,SAAChD,EAAD,KAEA,SAAC8C,EAAD,2EAIJ,C","sources":["components/ContactList/ContactList.styled.js","components/ContactList/ContactItem.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\nlist-style: none;\njustify-content: start;\nalign-items: center;\nwidth: 550px;\n`;\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nwidth: 100%;\npadding: 12px;\nbox-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n  0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Button = styled.button`\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\nwidth: 100px;\nborder-radius: 5px;\npadding: 3px 2px;\nmargin-left: 10px;\ncursor: pointer;\nbackground-color: rgb(48, 213, 200);\n&:hover {\n  box-shadow: 0px 2px 1px 1px rgba(0, 0, 0, 0.15);\n  background-color: rgb(48, 63, 159);\n  color: #fff;\n}\n`\nexport const Data = styled.p`\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\n`;\n","import PropTypes from \"prop-types\";\n\nimport { Button, Item, Data } from \"./ContactList.styled\";\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n    <Item key={id}>\n      <Data>\n        {name} : {number}\n      </Data>\n      <Button onClick={onDelete} type=\"button\" name=\"delete\">\n        delete\n      </Button>\n      </Item>\n    </>\n  );\n}\n\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    console.log('selectVisibleContacts');\n    const data = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(data)\n    );\n  }\n);\n","import PropTypes from \"prop-types\";\n\nimport { ContactItem} from './ContactItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n\nconst contacts = useSelector(selectVisibleContacts);\n\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number}) => (\n       <ContactItem key={id} id={id} name={name} number={number} />\n       ))}\n    </List>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n","import styled from 'styled-components';\n\nexport const Form = styled.form\n`display: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\npadding: 10px;\nwidth: 600px;\nborder-radius: 5px;\nbox-shadow: 3px 1px 3px 3px rgba(0, 0, 0, 0.2),\n0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\nmargin-bottom: 16px;\nmargin-left: 5px;\n`;\n\n\n\n\n\n\n\nexport const Label = styled.label\n`display: flex;\nflex-direction: column;\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\nmargin-bottom: 16px;\ncursor: pointer;\n`;\n\nexport const Input = styled.input\n`color: rgb(23, 23, 24);\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\npadding: 5px;\nborder-radius: 4px;\nborder: 1px solid rgb(189, 189, 189);\nwidth: 500px;\noutline: 0;\n&:focus {\n  border: 1px solid rgb(43, 50, 178);\n}\n`;\n\nexport const Button = styled.button\n`display: flex;\nalign-items: center;\njustify-content: center;\ncolor: #fff;\nbackground-color: rgb(48, 213, 200);\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\nborder: 0;\noutline: 0;\npadding: 8px 24px;\nborder-radius: 4px;\ncursor: pointer;\nbox-shadow: 1px 2px 1px 1px rgba(0, 0, 0, 0.05);\ntext-transform: uppercase;\nuser-select: none;\ntransition: background-color 400ms ease-in-out, box-shadow 400ms ease-in-out;\n&:hover {\n  box-shadow: 0px 2px 1px 1px rgba(0, 0, 0, 0.15);\n  background-color: rgb(48, 63, 159);\n}\n`;\n","import { useForm } from \"react-hook-form\";\nimport { toast } from 'react-toastify';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport TextField from '@mui/material/TextField';\n\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { Form, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const schema = yup.object().shape({\n    name: yup.string().required('Name is required'),\n    number: yup.string().min(7, 'must be at least 7 characters long').required('Number is required'),\n  }).required();\n\n  // const onSubmit = data => console.log(data);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n    },\n    reset } = useForm({\n      defaultValues: {\n      name: '',\n      number: '',\n  },\n   resolver: yupResolver(schema),\n\n  mode: \"onSubmit\",\n});\n\n  const onSubmit = (event) => {\n    for (const contact of contacts) {\n      if (contact.name.toLowerCase() === event.name.toLowerCase()) {\n        toast.error(`The entered ${event.name} already exists in contacts! Please enter another name!`);\n       return;\n      };\n\n      if (contact.number === event.number) {\n        toast.error(`The entered ${event.number} already exists in contacts! Please enter another number!`);\n       return;\n      };\n  }\n\n    dispatch(addContact(event));\n    console.log(event)\n\n      reset();\n  }\n\n\n    return (\n      <Form onSubmit={handleSubmit(onSubmit)}>\n      <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        sx={{ width: '65ch' }}\n        error={!!errors.name?.message}\n        id=\"outlined-error\"\n        helperText={errors.name?.message}\n        {...register(\"name\")}\n        placeholder=\"Vitaliy Meshechek\"\n        required\n\n      />\n      <TextField\n          id=\"outlined-basic\"\n          label=\"Number\"\n          variant=\"outlined\"\n          sx={{ width: '65ch', margin: '20px'}}\n          error={!!errors.number?.message}\n          helperText={errors.number?.message}\n          {...register(\"number\")}\n          placeholder=\"283-34-54\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n    );\n}\n        // {errors.number && <p>Fields must be filled!</p>}\n      // {errors.name && <p>Fields must be filled!</p>}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const [name, setName] = useState('');\n// const [number, setNumber] = useState('');\n\n// const handleChange = event => {\n//   const { name, value } = event.currentTarget;\n\n//   switch (name) {\n//     case 'name':\n//       setName(value);\n//       break;\n\n//     case 'number':\n//       setNumber(value);\n//       break;\n\n//     default:\n//       return;\n//   }\n// };\n\n\n\n// const checkName = name => {\n//   console.log('name', name);\n//   return contacts.find(\n//     contact => contact.name.toLowerCase() === name.toLowerCase(),\n//   );\n// };\n\n// const checkNumber = number => {\n//   return contacts.find(contact => contact.number === number);\n// };\n\n// const handleSubmit = e => {\n//   e.preventDefault();\n\n//   if (checkName(name)) {\n//     alert(`${name} is already in contacts`);\n//   } else if (checkNumber(number)) {\n//     alert(`${number} is already in your contacts!`);\n//   } else {\n//     dispatch(addContact(name, number));\n//   }\n\n// };\n","import styled from 'styled-components';\n\nexport const Container = styled.div\n`display: flex;\njustify-content: start;\nalign-items: center;\n`;\n\nexport const Label = styled.label\n`display: flex;\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\npadding-left: 15px;\nmargin-bottom: 16px;\ncursor: pointer;\n`;\n\nexport const Input = styled.input\n`color: rgb(23, 23, 24);\nfont-weight: 500;\nfont-size: 22px;\nline-height: 1.18;\npadding: 5px;\nmargin-left: 5px;\nborder-radius: 4px;\nborder: 1px solid rgb(189, 189, 189);\nwidth: 350px;\noutline: 0;\n&:focus {\n  border: 1px solid rgb(43, 50, 178);\n}\n`;\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { Container, Label, Input } from \"./Filter.styled\";\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterChange = event => {\n  const filterValue = event.target.value;\n    dispatch(changeFilter(filterValue))\n   };\n\n\n  return (\n    <Container>\n      <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        onChange={filterChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n      </Label>\n    </Container>\n  );\n}\n\n\n","import styled from 'styled-components';\n\nexport const Container = styled.div\n`max-width: 650px;\nmargin: 20px auto;\npadding: 10px 40px;\nbackground-color: #F0FFF0;\nbox-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px,\n  rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\nborder-radius: 5px;\n`;\n\n\nexport const Title = styled.h1\n`margin-bottom: 15px;\ncolor: #000000;\nfont-style: oblique;\ntext-align: center;\ntext-decoration: blink;\ntext-shadow: 4px 2px 4px rgb(133, 165, 226);\n`;\n\nexport const Paragraph = styled.p\n`margin-bottom: 15px;\ncolor: #f70c4b;\nfont-weight: 500;\nfont-size: 22px;\nfont-style: oblique;\ntext-align: center;\ntext-decoration: blink;\ntext-shadow: 4px 2px 4px rgb(133, 165, 226);\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { selectError } from 'redux/contacts/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Container, Title, Paragraph } from './Contacts.styled';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactsLength = contacts.length;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n    <Title title=\"Phonebook\">Phonebook</Title>\n    <ContactForm />\n    <Title title=\"Contact\">Contact</Title>\n    <Filter />\n    {isLoading && !error && <b>Request in progress...</b>}\n    {contactsLength > 0 ? (\n     <ContactList />\n   ) : (\n     <Paragraph>Currently your phonebook has no contacts. Please add them.</Paragraph>\n   )}\n  </Container>\n  );\n}\n"],"names":["List","styled","Item","Button","Data","ContactItem","id","name","number","dispatch","useDispatch","onClick","deleteContact","type","selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","console","log","data","toLowerCase","includes","ContactList","useSelector","map","Form","ContactForm","schema","yup","shape","required","min","useForm","defaultValues","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","onSubmit","event","contact","toast","addContact","TextField","label","variant","sx","width","message","helperText","placeholder","margin","Container","Label","Input","Filter","onChange","filterValue","target","value","changeFilter","pattern","title","Title","Paragraph","Contacts","contactsLength","length","useEffect","fetchContacts"],"sourceRoot":""}